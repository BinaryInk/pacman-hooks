#!/bin/sh

GITHOOKROOT="$(git rev-parse --show-toplevel)/.git/hooks"
GITHOOKINSTALLSCRIPT="$(git rev-parse --show-toplevel)/.githooks/install-githooks.sh"
# ANSI escape codes for bold text
BOLD_ON='\033[1m'
BOLD_OFF='\033[0m'


# Local repo setting for skipping changing pacman hook permissions
skippachookpermfix=$(git config --type=bool hooks.skippachookpermfix)
skippachookpermfixprecommit=$(git config --type=bool hooks.skippachookpermfixprecommit)
# Local repo setting for skipping changing pacman script permissions
skippacscriptpermfix=$(git config --type=bool hooks.skippacscriptpermfix)
skippacscriptpermfixprecommit=$(git config --type=bool hooks.skippacscriptpermfixprecommit)

if [ "$skipgithookupdate" = "true" ]; then
    echo 'Skipping githook auto-update (hooks.skipgithookupdate is true)'
elif [ -f "${GITHOOKROOT}/.updated" ]; then
	rm $GITHOOKROOT/.updated -f
else
	echo -e "${BOLD_ON}Updating githooks...${BOLD_OFF}"
    $GITHOOKINSTALLSCRIPT
	touch "$GITHOOKROOT/.updated"
    echo -e "${BOLD_ON}Githooks updated, restarting...${BOLD_OFF}"
	$GITHOOKROOT/pre-commit
    exit 0
fi

echo -e "${BOLD_ON}Running pre-commit git hook...${BOLD_OFF}"
if [ "$skippachookpermfixprecommit" = "true" ]; then
	echo 'Skipping changing permissions for script files (hooks.skippacscriptpermfixprecommit).'
elif [ "$skippachookpermfix" = "true" ]; then
	echo 'Skipping changing permissions for script files (hooks.skippacscriptpermfix is set).'
else
	$GITHOOKROOT/set-pachookpermissions.sh
fi
if [ "$skippacscriptpermfixprecommit" = "true" ]; then
	echo 'Skipping changing permissions for script files (hooks.skippacscriptpermfixprecommit).'
elif [ "$skippacscriptpermfix" = "true" ]; then
	echo 'Skipping changing permissions for script files (hooks.skippacscriptpermfix is set).'
else
	$GITHOOKROOT/set-pacscriptpermissions.sh
fi
